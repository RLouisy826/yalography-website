generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Bookings {
  id          Int             @id @default(autoincrement())
  email       String
  firstName   String
  lastName    String
  date        DateTime
  time        String
  phone       String          @db.VarChar(40)
  type        String
  environment Boolean
  description String?         @db.Text
  status      BookingsStatus? @default(pending)
  features    String?         @db.Text
  tasks       Tasks[]
  orders      Orders?

  @@index([status])
  @@map("bookings")
}

model Projects {
  id           Int      @id @default(autoincrement())
  title        String?
  description  String?  @db.Text
  thumbnail    String?
  createdAt    DateTime @default(now())
  testimonial  String?  @db.Text
  companyName  String?
  customerName String?
  published    Boolean  @default(false)
  name         String   @unique
  type         String?
  pinned       Boolean  @default(false)
  images       Images[]

  @@map("projects")
}

model Images {
  id        Int           @id @default(autoincrement())
  width     Int
  height    Int
  url       String
  alt       String?       @db.Text
  published Boolean       @default(false)
  projectId Int?
  folderId  Int?
  name      String
  size      Int
  type      String
  publicId  String
  project   Projects?     @relation(fields: [projectId], references: [id])
  folder    ImageFolders? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([folderId])
  @@map("images")
}

model ImageFolders {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  Images    Images[]
}

model Tasks {
  id          Int          @id @default(autoincrement())
  name        String
  deadline    DateTime?
  description String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  status      Boolean      @default(false)
  priority    TaskPriority @default(medium)
  bookingId   Int?
  pinned      Boolean      @default(false)
  subTasks SubTasks[]
  booking     Bookings?    @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
  @@map("tasks")
}

model Orders {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  quote     Int
  bookingId Int      @unique
  month     String
  year      Int
  booking   Bookings @relation(fields: [bookingId], references: [id])
}

model SubTasks {
  id          Int                @id @default(autoincrement())
  name        String
  createdAt   DateTime           @default(now())
  taskId      Int
  priority    sub_tasks_priority @default(low)
  status      sub_tasks_status   @default(todo)
  description String?            @db.Text
  task Tasks  @relation(fields: [taskId],references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("sub_tasks")
}

enum BookingsStatus {
  completed
  pending
  approved
}

enum TaskPriority {
  low
  medium
  high
}

enum sub_tasks_priority {
  low
  medium
  high
}

enum sub_tasks_status {
  todo
  inprogress
  completed
}
